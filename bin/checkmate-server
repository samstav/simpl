#!/usr/bin/env python
import os
from subprocess import call
import sys

if (len(sys.argv) > 1 and sys.argv[1] == 'START' and '-h' not in sys.argv and
        '--help' not in sys.argv):
    path = os.path.normpath(os.path.join(os.path.dirname(__file__), os.pardir,
                                         'checkmate', 'server.py'))
    params = ["python", path]
    if len(sys.argv) > 2:
        params.extend(sys.argv[2:])
    try:
        print 'Running: %s' % ' '.join(params)
        call(params)
    except KeyboardInterrupt:
        print "\nExiting by keyboard request"
else:
    print """
    *** Checkmate Server Command-line Utility ***

    Starts the Checkmate Server & REST API

    Usage:

        checkmate-server START [options] [address[:port]

    Options:

        --with-ui:         enable support for browsers and HTML templates
        --with-simulator:  enable support for the workflow simulator
        --with-admin:      enable /admin calls (authorized to admin users only)
        --newrelic:        enable newrelic monitoring (place newrelic.ini in
                           your directory)
        --eventlet:        use the eventlet server (recommended in production)
        --quiet:           turn down logging to WARN (default is INFO)
        --verbose:         turn up logging to DEBUG (default is INFO)
        --debug:           turn on additional debugging inspection and output
                           including full HTTP requests and responses. Log
                           output includes source file path and line numbers.
        --trace-calls, -t: display call hierarchy and errors to stdout
        --eager:           all celery (queue) tasks will be executed in-process
                           Use this for debugging only. There is no need to
                           start a queue instance when running eager.


    Settings:
    """
    for key in os.environ:
        if key.startswith('CHECKMATE_') or key.startswith('CELERY'):
            if key.startswith('CHECKMATE_CLIENT'):
                pass  # used for client/test calls, not the server
            else:
                print key, '=', os.environ[key]
