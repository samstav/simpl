# **CheckMate** is a configuration management REST service written in python.
# The source can be found [here](http://github.com/ziadsawalha/checkmate)
#
# This sample configuration file can be used to deploy a wordpress application
# to the cloud. It also currently serves as the main reference for the
# CheckMate configuration syntax.
#
# ${VARIABLE} can be replaced by with your local variables
# before posting it to checkmate like this:
#
#     awk '{while(match($0,"[$][\\{][^\\}]*\\}")) {var=substr($0,RSTART+2,RLENGTH -3);gsub("[$][{]"var"[}]",ENVIRON[var])}}1' < app.yaml
#
# To transform and send the output to checkmate:
#
#     CHECKMATE_TENANT=$(curl -H "X-Auth-User: ${CHECKMATE_USERNAME}" -H "X-Auth-Key: ${CHECKMATE_APIKEY}" -I https://identity.api.rackspacecloud.com/v1.0 -v 2> /dev/null | grep "X-Server-Management-Url" | grep -P -o $'(?!.*/).+$'| tr -d '\r') && CHECKMATE_TOKEN=$(curl -H "X-Auth-User: ${CHECKMATE_USERNAME}" -H "X-Auth-Key: ${CHECKMATE_APIKEY}" -I https://identity.api.rackspacecloud.com/v1.0 -v 2> /dev/null | grep "X-Auth-Token:" | awk '/^X-Auth-Token:/ { print $2 }') && awk '{while(match($0,"[$][\\{][^\\}]*\\}")) {var=substr($0,RSTART+2,RLENGTH -3);gsub("[$][{]"var"[}]",ENVIRON[var])}}1' < examples/app.yaml | curl -H "X-Auth-Token: ${CHECKMATE_TOKEN}" -H 'content-type: application/x-yaml' http://localhost:8080/${CHECKMATE_TENANT}/deployments/simulate -v --data-binary @-


#### ALPHA STATUS
#
# This syntax is under development (and open for discussion). So, in order to
# distinguish what has been implemnted in the code, versus what is only being
# discussed in this document, any piece that is actually used in the code is
# marked with the comment #IMPLEMENTED at the end of the document which shows
# a sample deployment after checkmate has processed it


#### Application
# This file defines all the aspects of a number of possible wordpress
# deployments. The pieces it brings together are
# [components](#components),
# environments,
# blueprints,
# and deployments.

# <a id="components" />
#### Components
# Components define the basic building blocks for checkmate. We use a syntax
# similar to Juju Charm syntax

#Definitions of components/services used in this file
components:
  # the name of the component and an optional anchor (any unique name preceded by &) which
  # can be used to reference it from elsewhere in the file
  wordpress: &wordpress1
    id: wordpress1
    # revisions track multiple versions of a component definition
    revision: 3
    # a short description of the component
    summary: "A pretty popular blog engine"
    # the interfaces it provides (a web service on port 80, a database host,
    # etc...). Accepted list is:
    #    - url: an internet resource accessible over a URL (http[s], ftp, etc)
    #    - db: a database
    provides:
      url: http
    requires:
      db:
       interface: mysql
    # User/consumer options - these are less technical and can change settings
    options:
      url:
        type: String
        default: localhost
        description: the url to use to host your blog on
      high-availability:
        type: Boolean
        default: false
        description: build in redundancy? If not, build one server.
    # Advanced settings - technical
    settings:
      instance/flavor:
        default: 1  # flavor=256mb. TODO: or maybe something more generic
        description: the type (and size) of instance to use
        type: {1: "256Mb", 2: "512Mb"} # TODO: How do we link this to a list of images?
      instance/os:
        default: Ubuntu 11.10  # Translated to image 119 by Rax provider.
        description: the operating system and version to use
      instance/count:
        default: 1
        description: the number of instances to spin up

  mysql: &mysql
    id: mysql
    revision: 1
    summary: "A pretty popular database"
    provides:
      db: mysql
    # Advanced settings - technical
    settings:
      password:
        type: String
        default: =generate()  # TODO: think about how best to represent this.
        description: the password for the database
      instance/flavor:
        default: 1  # flavor=512mb.
        description: the type (and size) of instance to use

  loadbalancer: &loadbalancer
    id: loadbalancer
    revision: 1
    summary: Load-balancer as a Service instance
    provides:
      url: http
    requires:
      url:
        interface: http

#### Blueprints

# An architecture template
# This would be where we define the architecture of an application which would include
# all the components, tiers, connections, and scaling rules for that application
blueprint: &wp
  name: Simple Wordpress
  services:
    wordpress:
      config: *wordpress1 #Reference in local file
      exposed: true
      open-ports: [80/tcp]
      relations: {db: database}  # resource-type: service
    database: #TODO: remove hard coding against this name. Thinak about what these names mean. These are basically tiers...
      config: *mysql  #TODO: support local (same server) and remote links like local://components/mysql

blueprint: &wp1
  name: OneBox Wordpress
  inherit: *wp
  constraint:
    instance-count: 1

blueprint: &wp-multi
  name: Scalable Wordpress
  services:
    loadbalancer:
      config: *loadbalancer
      exposed: true
      open-ports: [80/tcp]
      relations: {url: wordpress}
    wordpress:
      config: *wordpress1 #Reference in local file
      relations: {db: database}  # resource-type: service
    database: #TODO: remove hard coding against this name. Thinak about what these names mean. These are basically tiers...
      config: *mysql  #TODO: support local (same server) and remote links like local://components/mysql


#### Environments
#
# Schema is:
# environment:
#   name: !!str
#   providers:
#      id:  &unique-reference  # reference is unique in this environment
#        vendor: !!str
#        id: !!str
#        provides:
#        - type: !!enum('compute', 'database', etc..)
#        [endpoint: !!uri]
#      [common:]  #any values common to all providers
# A test environment
environment: &rackspace-legacy-cloud-test
  name: Legacy Cloud Servers Test Environment in ORD
  description: |
    This environment tests legacy cloud servers. It is hard-targetted at chicago
    because the rackcloudtech legacy servers account is in chicago

  # The idea behind providers is that the environment can be configured to use different providers for different types of resources
  # For example, we could use Cloud Servers or Dedicated Servers as a compute provider.
  # The intent is that these providers can be extracted automatically from the service catalog when authenticating, but including providers here
  # means we can pre-determine or hard-code them if we want to.
  providers:
    legacy: &rax-cloud-servers-slice
      provides:
      - compute
      vendor: rackspace
    loadbalancer: &rax-lbaas
      vendor: rackspace
      provides:
      - load-balancer
      endpoint: https://lbaas.api.rackpsacecloud.com/servers/{tenantId}
    database: &rax-dbaas
      vendor: rackspace
      provides:
      - database
      endpoint: https://database.api.rackpsacecloud.com/servers/{tenantId}
    chef-local: &configurator  # MORE THOUGHT needed...
      vendor: opscode
      provides:
      - configuration
    common:
      vendor: rackspace
      credentials:
      - rackspace:
        username: ${CHECKMATE_USERNAME}
        apikey: ${CHECKMATE_APIKEY}
      - ssh:
        public_key: =generate()
      constraints:
      - region: chicago

#### Deployments

# Actual deployment instances. These are our live, running systems
deployment:                                                                     #IMPLEMENTED - checkmate looks for this
  name: My WordPress by CheckMate
  prefix: CM-WP-
  blueprint: *wp-multi
  environment: *rackspace-legacy-cloud-test
  inputs:
    domain: ${CHECKMATE_DOMAIN}
    ssl: false
    region: ${CHECKMATE_REGION}  # TODO: this is still read from os.environ
    high-availability: false
    requests-per-second: 60
    database:instance/flavor: 1
    wordpress:instance/flavor: 1  # Is this how we want to do this? That would mnean no colons in settings names...
    wordpress:instance/count: 2

components: &exceptional-scenarios
  test: *nosql  # Just to test an unknown reference. Should translate to a local URI.

#### For sample Output, see simulatior.json in tests directory

#
# This documentation written to generate HTML by Docco.
# To regenerate and preview:
#
#     docco app.yaml && open docs/app.html
