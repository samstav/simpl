# Schema Documentation for Components

id:
  type: string  # not necessarily a UUID,
  description: |
    a unique identifier (not necessarily a UUID, but a string... although that
    is common, safe, and ... the ugly option) within the
    provider that provides that component.

    Note: `name` was used for this field in an earlier version of Checkmate

name:
  type: string
  description: |
    A globally unique and known, predefined name. For example, the name for
    wordpress is wordpress always (in puppet, chef, etc....). And we will maintain
    a list of those names (at least for now). Precedents for this are OpsCode cookbooks and Juju charms
    (http://jujucharms.com/charms/precise).
    **Action item/future consideration** create our own catalog (or use Charms/cookbooks)

display_name:
  type: string
  description: For user friendliness (*mssql vs Microsoft SQL Server)

role:
  type: string
  description: |
    Allows you to specify the role of this component.

    Example:

    > component:
    >   name: wordpress
    >   role: master

version:
  description: supply a version string in semantic versioning format.

description: |
  A short description of the component.

is:
  description: |
    describes the type of resource based on a list of primitive resource types (compute, database, load-balancer, application, ...)
    starting with ones from OpenStack.

requires:
  description: |
    what this resource needs. The needs can be specific or general. General would be anything with a mysql
    interface (for WordPress). Specific examples would be:I need a host compute resource that is an Ubuntu 12.04 or
    later machine. Or I need a mysql database that is on a Rackspace Cloud Database instance.

    Syntax (two options, long an short form):
        type: interface. Example: database: mysql - short syntax is resource_type:interface. By design.
        name: hash (key/value pairs) for more specific stuff. Name is arbitrary.
        Name key/value example:
            server: (this is the arbitrary key - the label of this requirement)
                type: compute
                interface: debian (this says I expect to be able to do apt-get, vs yum)
                relation: host (this says I am hosted on this resource. I cannot exist without it. I am down when it is
                          down). "host" is a keyword.
                constraint:
                - 'os': ['debian', 'redhat']
    The name+key/value syntax allows for requiring more than one of the same resource (ex. log and data mysql databases)
    as well as adding additional constraints, etc....

provides:
  description: |
    array of resource_type:interface entries (array can be represented in YAML with entries preceded with
    dashes). For example, let's say we get a Cloud Sites API that provides a "site" resource. Site could provide:
    - database: mysql
    - application: php

supports:
  description: |
    other services or components that this component can use (ex. optional cache)

options:
  description: |
    What settings I can set on this component

    ```
    username:
        default: root
        required: optional | required | auto-generated (default: optional)
        type: string (currently we support string, int, boolean) (default: string)
            * Action Items: How can we tie this to a "list" from the provider
        label: User Name (used for display friendliness)
        description: ...
        source_field_name: the name as it is known by the underlying provider. Ex. wordpress/database/db_user for OpsCode
                           Chef. We need this currently since we dynamically generate component definitions and we need
                           to be able to map things back after they've flowed through checkmate.
            * Should be able to get rid of this in the future with clean, reversible mapping logic in providers.
        type: string
        regex: for validation
        sample: for display, to show what this looks like.
        help: help text.
    password:
    ```

---
# Notes on usage
API: |
    GET /providers
    GET /:tenant_id/environments/:id/providers/:id/catalog/
    - you'll get a list of components grouped by resource type. (You'll also get some additional info called lists).

