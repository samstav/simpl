# pylint: disable=E1102,W0613

# Copyright (c) 2011-2013 Rackspace Hosting
# All Rights Reserved.
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

# pylint: disable=R0913,E1102
"""Rackspace Cloud Load Balancer provider and specs.Celery tasks."""
import logging

from celery import task
import pyrax

from checkmate.common import statsd
from checkmate import exceptions
from checkmate.providers.rackspace.loadbalancer.provider import Provider
from checkmate import utils

LOG = logging.getLogger(__name__)


def _fix_corrupted_data(data):
    """Convert CloudLB's metadata back to a list.

    At one point sync was inadvertently overwriting CloudLB's metadata list
    with a dict. This will convert it back to a list, though with potential
    data loss, because we were throwing away the 'id' key in any of the
    metadata generated by CloudLB.

    This can be removed once the LOG entries stop.
    """
    LOG.warn("Fixing corrupted CloudLB metadata: %s", data)
    fixed_data = []
    for key in data:
        fixed_data.append({'key': key, 'value': data[key]})
    return fixed_data


def _update_metadata(context, resource, clb):
    """Updates metadata on cloud loadbalancer."""
    new_key, new_value = Provider.generate_resource_tag(
        context.get('base_url'), context.get('tenant'),
        context.get('deployment'), resource.get('index')).items()[0]

    new_meta = {'key': new_key, 'value': new_value}
    add_tag = True
    meta = clb.get_metadata()
    if isinstance(meta, dict):
        meta = _fix_corrupted_data(meta)

    for entry in meta:
        if entry['key'] == 'RAX-CHKMATE':
            clb.delete_metadata('RAX-CHKMATE')
        elif (entry['key'] == new_meta['key'] and
                entry['value'] == new_meta['value']):
            add_tag = False

    if add_tag:
        clb.update_metadata(new_meta)


@task
@statsd.collect
def sync_resource_task(context, resource, resource_key, api=None):
    """Sync provider resource status with deployment."""
    utils.match_celery_logging(LOG)
    key = "instance:%s" % resource_key
    if context.get('simulation') is True:
        return {
            key: {
                'status': resource.get('status', 'DELETED')
            }
        }

    if api is None:
        api = Provider.connect(context, resource.get("region"))

    instance_id = resource.get("instance", {}).get('id')

    try:
        if not instance_id:
            error_message = "No instance id supplied for resource %s" % key
            raise exceptions.CheckmateException(error_message)
        clb = api.get(instance_id)

        _update_metadata(context, resource, clb)

        status = {'status': clb.status}
    except pyrax.exceptions.ClientException as exc:
        if exc.code not in ['404', '422']:
            return
        status = {'status': 'DELETED'}
    except exceptions.CheckmateException:
        status = {'status': 'DELETED'}

    if status.get('status'):
        LOG.info("Marking load balancer instance %s as %s", instance_id,
                 status['status'])
    return {key: status}


class CheckmateLoadbalancerBuildFailed(exceptions.CheckmateException):
    """Error building loadbalancer"""
    pass
