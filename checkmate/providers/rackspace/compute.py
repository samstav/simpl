import logging
import os
from SpiffWorkflow.operators import Attrib
from SpiffWorkflow.specs import Celery

from checkmate.providers import ProviderBase

LOG = logging.getLogger(__name__)


class LegacyProvider(ProviderBase):
    def generate_template(self, deployment, service_name, service, name=None):
        inputs = deployment.get('inputs', {})
        flavor = inputs.get('%s:instance/flavor' % service_name,
                service['config']['settings'].get(
                    '%s:instance/flavor' % service_name,
                    service['config']['settings']
                    ['instance/flavor']['default']))
        image = inputs.get('%s:instance/os' % service_name,
                service['config']['settings'].get(
                        '%s:instance/os' % service_name,
                        service['config']['settings']['instance/os']
                        ['default']))
        if image == 'Ubuntu 11.10':
            image = 119
        if not name:
            name = 'CMDEP%s-server.stabletransit.com' % (deployment['id'][0:7])
        template = {'type': 'server', 'dns-name': name, 'flavor': flavor,
                'image': image, 'instance-id': None}

        return template

    def add_resource_tasks(self, resource, key, wfspec, deployment, context,
            wait_on=None):
        """
        :param resource: the dict of the resource generated by
                generate_template earlier
        :returns: returns the root task in the chain of tasks
        TODO: use environment keys instead of private key
        """
        create_server_task = Celery(wfspec, 'Create Server:%s' % key,
                           'stockton.server.distribute_create',
                           call_args=[Attrib('deployment'),
                           resource.get('dns-name')],
                           image=resource.get('image', 119),
                           flavor=resource.get('flavor', 1),
                           files=context['files'],
                           ip_address_type='public',
                           defines={"Resource": key})

        build_wait_task = Celery(wfspec, 'Check that Server is Up:%s'
                % key, 'stockton.server.distribute_wait_on_build',
                call_args=[Attrib('deployment'), Attrib('id')],
                password=Attrib('password'),
                identity_file=os.environ.get('CHECKMATE_PRIVATE_KEY',
                        '~/.ssh/id_rsa'))
        create_server_task.connect(build_wait_task)
        return create_server_task


class NovaProvider(ProviderBase):
    def generate_template(self, deployment, service_name, service, name=None):
        inputs = deployment.get('inputs', {})
        flavor = inputs.get('%s:instance/flavor' % service_name,
                service['config']['settings'].get(
                    '%s:instance/flavor' % service_name,
                    service['config']['settings']
                    ['instance/flavor']['default']))
        image = inputs.get('%s:instance/os' % service_name,
                service['config']['settings'].get(
                        '%s:instance/os' % service_name,
                        service['config']['settings']['instance/os']
                        ['default']))
        if image == 'Ubuntu 11.10':
            image = '3afe97b2-26dc-49c5-a2cc-a2fc8d80c001'
        flavor = str(flavor)  # nova uses string IDs
        if not name:
            name = 'CMDEP%s-server.stabletransit.com' % (deployment['id'][0:7])
        template = {'type': 'server', 'dns-name': name, 'flavor': flavor,
                'image': image, 'instance-id': None}

        return template

    def add_resource_tasks(self, resource, key, wfspec, deployment,
            context, wait_on=None):
        """
        :param resource: the dict of the resource generated by
                generate_template earlier
        :returns: returns the root task in the chain of tasks
        TODO: use environment keys instead of private key
        """
        create_server_task = Celery(wfspec, 'Create Server:%s' % key,
                           'stockton.nova.distribute_create',
                           call_args=[Attrib('deployment'),
                           resource.get('dns-name')],
                           image=resource.get('image',
                                    '3afe97b2-26dc-49c5-a2cc-a2fc8d80c001'),
                           flavor=resource.get('flavor', "1"),
                           files=context['files'],
                           defines={"Resource": key})

        build_wait_task = Celery(wfspec, 'Check that Server is Up:%s'
                % key, 'stockton.nova.distribute_wait_on_build',
                call_args=[Attrib('deployment'), Attrib('id')],
                password=Attrib('password'),
                identity_file=os.environ.get('CHECKMATE_PRIVATE_KEY',
                        '~/.ssh/id_rsa'))
        create_server_task.connect(build_wait_task)
        return create_server_task
