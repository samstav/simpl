// Generated by CoffeeScript 1.3.3
(function() {
  var CalcApp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CalcApp = (function() {
    var AppView, Backup, Bandwidth, CartView, ColumnView, Database, ItemCollection, ItemView, ItemsSubset, LoadBalancer, Managed, ModalView, Monitor, Presets, Pricing, Server, Storage, Vent, betterFocus, checkEmpty, displaySize, titlize, toCurrency;

    function CalcApp() {
      var App, Items;
      Items = new ItemCollection;
      App = new AppView({
        el: '#racker-calculator',
        collection: Items
      });
    }

    Pricing = {
      linux: {
        '512': {
          rate: 0.022,
          disk: 20
        },
        '1024': {
          rate: 0.06,
          disk: 40
        },
        '2048': {
          rate: 0.12,
          disk: 80
        },
        '4096': {
          rate: 0.24,
          disk: 160
        },
        '8192': {
          rate: 0.48,
          disk: 320
        },
        '15872': {
          rate: 0.90,
          disk: 620
        },
        '30720': {
          rate: 1.20,
          disk: 1200
        }
      },
      windows: {
        '1024': {
          rate: 0.08,
          disk: 40
        },
        '2048': {
          rate: 0.16,
          disk: 80
        },
        '4096': {
          rate: 0.32,
          disk: 160
        },
        '8192': {
          rate: 0.58,
          disk: 320
        },
        '15872': {
          rate: 1.08,
          disk: 620
        },
        '30720': {
          rate: 1.56,
          disk: 1200
        }
      },
      cloud_db: {
        '512': {
          rate: 0.06
        },
        '1024': {
          rate: 0.115
        },
        '2048': {
          rate: 0.21
        },
        '4096': {
          rate: 0.40
        }
      }
    };

    Presets = {
      one: function() {
        return [
          {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }
        ];
      },
      two: function() {
        return [
          {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'load_balancer'
          }
        ];
      },
      three: function() {
        return [
          {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'database',
            quantity: 1,
            ram_size: 2048
          }, {
            kind: 'load_balancer'
          }
        ];
      },
      four: function() {
        return [
          {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'database',
            quantity: 1,
            ram_size: 2048
          }, {
            kind: 'load_balancer'
          }
        ];
      },
      five: function() {
        return [
          {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'server',
            quantity: 1,
            ram_size: 1024
          }, {
            kind: 'database',
            quantity: 1,
            ram_size: 2048
          }, {
            kind: 'database',
            quantity: 1,
            ram_size: 2048
          }, {
            kind: 'load_balancer'
          }
        ];
      }
    };

    Vent = (function(_super) {

      __extends(Vent, _super);

      function Vent() {
        return Vent.__super__.constructor.apply(this, arguments);
      }

      return Vent;

    })(Backbone.Events);

    LoadBalancer = (function(_super) {

      __extends(LoadBalancer, _super);

      function LoadBalancer() {
        return LoadBalancer.__super__.constructor.apply(this, arguments);
      }

      LoadBalancer.prototype.defaults = {
        quantity: 1,
        kind: 'load_balancer',
        connections: 100,
        hours: 730,
        ssl: false
      };

      LoadBalancer.prototype.price = function() {
        var rate;
        rate = this.get('ssl') ? 0.05 : 0.015;
        return this.get('quantity') * (rate * this.get('hours')) + (this.get('connections') * (0.00015 * this.get('hours')));
      };

      return LoadBalancer;

    })(Backbone.Model);

    Server = (function(_super) {

      __extends(Server, _super);

      function Server() {
        return Server.__super__.constructor.apply(this, arguments);
      }

      Server.prototype.defaults = function() {
        return {
          quantity: 1,
          ram_size: 512,
          hours: 730,
          redhat: false,
          os: 'linux'
        };
      };

      Server.prototype.rate = function() {
        return Pricing[this.get('os')][this.get('ram_size')].rate;
      };

      Server.prototype.price = function() {
        return this.get('quantity') * (this.rate() * this.get('hours')) + (this.get('redhat') ? 20 : 0);
      };

      return Server;

    })(Backbone.Model);

    Database = (function(_super) {

      __extends(Database, _super);

      function Database() {
        return Database.__super__.constructor.apply(this, arguments);
      }

      Database.prototype.defaults = function() {
        return _.defaults({
          db_type: 'cloud_server'
        }, Database.__super__.defaults.call(this));
      };

      Database.prototype.initialize = function() {
        return this.unset('redhat', {
          silent: true
        });
      };

      Database.prototype.rate = function() {
        var os;
        os = this.get('os');
        if (this.get('db_type') === 'cloud_db') {
          os = 'cloud_db';
        }
        return Pricing[os][this.get('ram_size')].rate;
      };

      Database.prototype.price = function() {
        return this.get('quantity') * (this.rate() * this.get('hours'));
      };

      return Database;

    })(Server);

    Managed = (function(_super) {

      __extends(Managed, _super);

      function Managed() {
        return Managed.__super__.constructor.apply(this, arguments);
      }

      Managed.prototype.defaults = {
        quantity: 1
      };

      Managed.prototype.price = function() {
        return 100;
      };

      return Managed;

    })(Backbone.Model);

    Bandwidth = (function(_super) {

      __extends(Bandwidth, _super);

      function Bandwidth() {
        return Bandwidth.__super__.constructor.apply(this, arguments);
      }

      Bandwidth.prototype.defaults = {
        quantity: 1
      };

      Bandwidth.prototype.price = function() {
        return 0.18 * this.get('quantity');
      };

      return Bandwidth;

    })(Backbone.Model);

    Storage = (function(_super) {

      __extends(Storage, _super);

      function Storage() {
        return Storage.__super__.constructor.apply(this, arguments);
      }

      Storage.prototype.defaults = {
        quantity: 1,
        storage_type: 'cloud_files',
        disk_size: 100
      };

      Storage.prototype.price = function() {
        var rate;
        rate = 0.10;
        return rate * this.get('disk_size');
      };

      return Storage;

    })(Backbone.Model);

    Backup = (function(_super) {

      __extends(Backup, _super);

      function Backup() {
        return Backup.__super__.constructor.apply(this, arguments);
      }

      Backup.prototype.defaults = {
        quantity: 1
      };

      Backup.prototype.price = function() {
        var managed;
        managed = this.collection.find(function(item) {
          return item.get('kind') === 'managed_service';
        });
        if (!!managed) {
          return 0;
        } else {
          return 10;
        }
      };

      return Backup;

    })(Backbone.Model);

    Monitor = (function(_super) {

      __extends(Monitor, _super);

      function Monitor() {
        return Monitor.__super__.constructor.apply(this, arguments);
      }

      Monitor.prototype.defaults = {
        quantity: 1,
        zone1: 0,
        zone4: 0,
        zone5: 0
      };

      Monitor.prototype.price = function() {
        var free, managed, zones;
        zones = [this.get('zone1'), this.get('zone4'), this.get('zone5')];
        managed = this.collection.find(function(item) {
          return item.get('kind') === 'managed_service';
        });
        if (!!managed) {
          free = 8;
          zones = _.map(zones, function(num) {
            var result;
            result = num - free;
            free = free - num < 0 ? 0 : free - num;
            if (result < 0) {
              return 0;
            } else {
              return result;
            }
          });
        }
        return (1.5 * zones[0]) + (2.0 * zones[1]) + (2.5 * zones[2]);
      };

      return Monitor;

    })(Backbone.Model);

    ItemCollection = (function(_super) {

      __extends(ItemCollection, _super);

      function ItemCollection() {
        return ItemCollection.__super__.constructor.apply(this, arguments);
      }

      ItemCollection.prototype.model = function(attrs, options) {
        switch (attrs.kind) {
          case "load_balancer":
            return new LoadBalancer(attrs, options);
          case "server":
            return new Server(attrs, options);
          case "database":
            return new Database(attrs, options);
          case "storage":
            return new Storage(attrs, options);
          case "bandwidth":
            return new Bandwidth(attrs, options);
          case "managed_service":
            return new Managed(attrs, options);
          case "backup":
            return new Backup(attrs, options);
          case "monitoring":
            return new Monitor(attrs, options);
          default:
            throw "No model defined for " + attrs.kind + ".";
        }
      };

      ItemCollection.prototype.initialize = function() {
        return Vent.on('app:item:remove', this.remove, this).on('app:item:add', this.add, this).on('app:item:save', this.updateItem, this);
      };

      ItemCollection.prototype.updateItem = function(model, options) {
        return model.set(options);
      };

      ItemCollection.prototype.getGrandTotal = function() {
        return this.reduce(function(memo, item) {
          return item.price() + memo;
        }, 0);
      };

      return ItemCollection;

    })(Backbone.Collection);

    ItemsSubset = (function(_super) {

      __extends(ItemsSubset, _super);

      function ItemsSubset() {
        return ItemsSubset.__super__.constructor.apply(this, arguments);
      }

      ItemsSubset.prototype.initialize = function(models, options) {
        this.kind = options.kind || 'server';
        this.parent = options.parent;
        return Vent.on('app:item:remove', this.remove, this);
      };

      ItemsSubset.prototype.parent = function() {
        return this.parent;
      };

      ItemsSubset.prototype.sieve = function(item) {
        var k, _i, _len, _ref;
        if (_.isString(this.kind)) {
          return item.get('kind') === this.kind;
        } else if (_.isArray(this.kind)) {
          _ref = this.kind;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            if (item.get('kind') === k) {
              return true;
            }
          }
        } else {
          throw "Invalid kind. Must be string or array.";
        }
      };

      return ItemsSubset;

    })(Backbone.Subset);

    ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.className = 'item';

      ItemView.prototype.events = {
        'keyup .quantity': 'update',
        'blur .quantity': 'update'
      };

      ItemView.prototype.template = _.template($('#item').html());

      ItemView.prototype.initialize = function() {
        this.kind = this.model.get('kind');
        return this.model.on('add', this.render, this).on('change', this.setSizePrice, this).on('remove', this.remove, this);
      };

      ItemView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$('.type').text(titlize(this.kind));
        this.setSizePrice();
        if (this.kind === 'managed_service' || this.kind === 'storage' || this.kind === 'monitoring' || this.kind === 'backup') {
          this.$('.quantity').attr('disabled', 'disabled');
        }
        return this;
      };

      ItemView.prototype.setSizePrice = function() {
        if (this.model.has('ram_size')) {
          this.$('.size').text(displaySize(this.model.get('ram_size')));
        }
        this.$('.price').text(toCurrency(this.model.price()));
        return this.$('.quantity').val(this.model.get('quantity'));
      };

      ItemView.prototype.update = function(e) {
        var val;
        val = this.$('.quantity').val();
        if ((!val || val === '0') && (e.keyCode === 13 || e.type === 'focusout')) {
          return Vent.trigger('app:item:remove', this.model);
        } else if (e.keyCode === 13 || e.type === 'focusout') {
          return this.saveModel(val);
        }
      };

      ItemView.prototype.saveModel = function(val) {
        if (_.isNumber(parseInt(val)) && _.isFinite(parseInt(val))) {
          return this.model.set({
            quantity: parseInt(val)
          });
        } else {
          return this.$('.quantity').val(this.model.get('quantity'));
        }
      };

      return ItemView;

    })(Backbone.View);

    CartView = (function(_super) {

      __extends(CartView, _super);

      function CartView() {
        return CartView.__super__.constructor.apply(this, arguments);
      }

      CartView.prototype.initialize = function() {
        return this.collection.on('add', this.addOne, this).on('reset', this.addAll, this).on('all', this.render, this);
      };

      CartView.prototype.render = function() {
        checkEmpty(this.collection.isEmpty());
        return this;
      };

      CartView.prototype.addAll = function() {
        this.$('.itemized').html('');
        return this.collection.forEach(function(item) {
          return this.addOne(item);
        }, this);
      };

      CartView.prototype.addOne = function(item) {
        var view;
        view = new ItemView({
          model: item
        });
        return this.$('.itemized').append(view.render().$el);
      };

      return CartView;

    })(Backbone.View);

    ColumnView = (function(_super) {

      __extends(ColumnView, _super);

      function ColumnView() {
        return ColumnView.__super__.constructor.apply(this, arguments);
      }

      ColumnView.prototype.events = {
        'click .add': 'newItem',
        'click .item': 'editItem',
        'click button.add-on': 'newAddOn'
      };

      ColumnView.prototype.initialize = function() {
        this.kind = this.$el.attr('id');
        if (this.kind === 'add_on') {
          this.kind = ['storage', 'monitoring', 'backup'];
        }
        if (!this.collection) {
          this.collection = new ItemsSubset([], {
            kind: this.kind,
            parent: this.options.parent
          });
        }
        this.collection.on('add change remove', this.render, this);
        this.collection.liveupdate_keys = 'all';
        return Vent.on('app:holder:remove', this.cancelNew, this);
      };

      ColumnView.prototype.render = function() {
        this.addAll();
        return this;
      };

      ColumnView.prototype.addAll = function() {
        var itemized,
          _this = this;
        itemized = this.$('.itemized');
        itemized.children().remove();
        this.$('.itemized-left').remove();
        this.$el.removeClass('split');
        this.totalQuantity = this.collection.map(function(item, k) {
          return item.get('quantity');
        }).reduce(function(memo, num) {
          return memo + num;
        }, 0);
        this.length = 0;
        this.collection.forEach(function(item, i) {
          var quantity, _results;
          quantity = item.get('quantity');
          if (quantity > 1 && _this.totalQuantity <= 10) {
            _results = [];
            while (quantity--) {
              _this.addItem(item);
              _results.push(_this.length++);
            }
            return _results;
          } else {
            _this.addItem(item);
            return _this.length++;
          }
        });
        return this.center();
      };

      ColumnView.prototype.addItem = function(item) {
        var desc, elem, quantity;
        quantity = item.get('quantity');
        if (item.has('ram_size')) {
          desc = displaySize(item.get('ram_size'));
        }
        elem = $("<li class='item" + (this.totalQuantity > 10 ? ' many' : '') + (desc ? ' desc' : '') + " " + (item.get('kind')) + "' data-quantity='" + quantity + "' data-cid='" + item.cid + "' " + (desc ? 'data-desc="' + desc + '"' : void 0) + " style='z-index: " + (this.length + 1) + ";' />");
        if (this.length === 5) {
          this.$('.itemized').addClass('itemized-left').removeClass('itemized');
          this.$el.append($('<div class="itemized" />'));
          this.$el.addClass('split');
          this.center(this.$('.itemized-left'));
        } else if (this.$('itemized-left')[0] && this.length < 5) {
          this.$('.itemized').remove();
          this.$('itemized-left').addClass('itemized').removeClass('itemized-left');
        }
        return this.$('.itemized').prepend(elem);
      };

      ColumnView.prototype.editItem = function(e) {
        var elem, model;
        elem = $(e.target);
        model = this.collection.getByCid(elem.attr('data-cid'));
        return Vent.trigger('app:modal:open', model, this.collection, elem);
      };

      ColumnView.prototype.newItem = function(e) {
        var elem, itemized, kind, model;
        e.preventDefault();
        $('.calc-modal').hide();
        kind = $(e.target).attr('data-kind');
        itemized = this.$('.itemized');
        elem = $("<li class='item holder' style='z-index: " + (itemized.children().length + 1) + ";'>");
        itemized.prepend(elem);
        this.center();
        checkEmpty(false);
        if (this.collection.last() && _.isString(this.kind)) {
          model = this.collection.last().clone();
        } else {
          model = this.collection.model({
            kind: kind
          });
        }
        return Vent.trigger('app:modal:open', model, this.collection, elem);
      };

      ColumnView.prototype.newAddOn = function(e) {
        var $target;
        e.preventDefault();
        $target = $(e.target);
        return $target.siblings('.calc-modal').show();
      };

      ColumnView.prototype.cancelNew = function(elem) {
        elem.remove();
        return this.center();
      };

      ColumnView.prototype.center = function(elem) {
        var top;
        if (elem == null) {
          elem = this.$('.itemized');
        }
        top = (elem.height() / 2) + 35;
        return elem.css('margin-top', top * -1);
      };

      return ColumnView;

    })(Backbone.View);

    ModalView = (function(_super) {

      __extends(ModalView, _super);

      function ModalView() {
        return ModalView.__super__.constructor.apply(this, arguments);
      }

      ModalView.prototype.tagName = 'form';

      ModalView.prototype.id = 'edit_modal';

      ModalView.prototype.className = 'calc-modal';

      ModalView.prototype.events = {
        'click button.save': 'saveModel',
        'click button.delete': 'deleteModel',
        'click a.close-btn': 'derender',
        'click a.toggle-advanced': 'toggleAdvanced',
        'slide #ram_size.slide': 'ramSizeSlider',
        'slide #disk_size.slide': 'diskSizeSlider',
        'slidechange #ram_size.slide': 'ramSizeSlider',
        'slidechange #disk_size.slide': 'diskSizeSlider',
        'change #os': 'changeOS'
      };

      ModalView.prototype.template = _.template($('#modal').html());

      ModalView.prototype.initialize = function(options) {
        var _this = this;
        this.ramz = _.keys(Pricing.linux);
        this["new"] = options.isNew;
        this.elem = options.elem;
        Vent.on('app:modal:close', this.derender, this);
        setTimeout(function() {
          var _this = this;
          return $('html').bind('click', function(e) {
            return _this.$('button.save').click();
          });
        }, 1);
        this.$el.bind('click', function(e) {
          return e.stopPropagation();
        });
        return this.render();
      };

      ModalView.prototype.render = function() {
        var attrs, disk_value, measure, ram_value, size;
        this.kind = this.model.get('kind');
        attrs = this.model.toJSON();
        this.$el.html(this.template(attrs));
        this.$('h3.kind').text(titlize(this.kind));
        this.position();
        $('body').append(this.$el);
        if (this.kind === 'database' || this.kind === 'server') {
          size = this.model.get('ram_size');
          ram_value = _.indexOf(this.ramz, size.toString());
          this.$('#ram_size.slide').slider({
            step: 1,
            min: 0,
            max: 6,
            value: ram_value
          });
          measure = ' MB';
          if (size > 512) {
            measure = ' GB';
            size = Math.floor(size * 0.001);
          }
          this.$('.size').text(size + measure);
        } else if (this.kind === 'storage') {
          disk_value = this.model.get('disk_size');
          this.$('#disk_size.slide').slider({
            min: 0,
            max: 1000,
            value: disk_value
          });
          this.$('.disk-size').text(disk_value + ' GB');
        }
        return this;
      };

      ModalView.prototype.derender = function() {
        if (this["new"]) {
          Vent.trigger('app:holder:remove', this.elem);
        }
        $('html').unbind('click');
        this.$el.unbind('click');
        return this.remove();
      };

      ModalView.prototype.ramSizeSlider = function(e, ui) {
        var measure, size;
        size = this.ramz[ui.value];
        measure = ' MB';
        if (size > 512) {
          measure = ' GB';
          size = Math.floor(size * 0.001);
        }
        return this.$('.size').text(size + measure);
      };

      ModalView.prototype.diskSizeSlider = function(e, ui) {
        return this.$('.disk-size').text(ui.value + ' GB');
      };

      ModalView.prototype.changeOS = function(e) {
        var os;
        os = $(e.target).val().toLowerCase();
        if (os === 'windows') {
          this.$('#ram_size.slide').slider({
            min: 1,
            max: 6
          });
          if (this.$('#ram_size.slide').slider('value') === 1) {
            this.$('#ram_size.slide').slider('value', 1);
          }
          if (this.kind === 'server') {
            this.$('.advanced').hide();
            return this.$('#redhat').removeAttr('checked');
          }
        } else if (os === 'linux') {
          this.$('#ram_size.slide').slider({
            min: 0,
            max: 6
          });
          if (this.kind === 'server') {
            return this.$('.advanced').show();
          }
        }
      };

      ModalView.prototype.position = function() {
        var offset;
        offset = this.elem.offset();
        this.$el.css({
          'top': offset.top - 55,
          'left': this.kind === 'load_balancer' ? offset.left + 180 : offset.left - 200
        });
        if (this.kind === 'load_balancer') {
          this.$el.addClass('on-right');
        } else {
          this.$el.removeClass('on-right');
        }
        return this;
      };

      ModalView.prototype.config = function() {
        var index, k, options, v;
        options = {};
        if (this.$('#hours')) {
          options.hours = parseInt(this.$('#hours').val());
        }
        if (this.$('#connections')) {
          options.connections = parseInt(this.$('#connections').val());
        }
        if (this.$('#ram_size')) {
          index = this.$('#ram_size').slider('value');
          options.ram_size = parseInt(this.ramz[index]);
        }
        if (this.$('#disk_size')) {
          options.disk_size = parseInt(this.$('#disk_size').slider('value'));
        }
        if (this.$('#ssl')) {
          options.ssl = this.$('#ssl').attr('checked');
        }
        if (this.$('#redhat')) {
          options.redhat = this.$('#redhat').attr('checked');
        }
        if (this.$('#daas')) {
          options.daas = this.$('#daas').attr('checked');
        }
        if (this.$('#cloud_db').attr('checked')) {
          options.db_type = 'cloud_db';
        } else if (this.$('#cloud_server').attr('checked')) {
          options.db_type = 'cloud_server';
        }
        if (this.$('#os')) {
          options.os = this.$('#os').val();
        }
        for (k in options) {
          v = options[k];
          if (_.isNaN(v) || _.isUndefined(v) || _.isNull(v)) {
            delete options[k];
          }
        }
        return options;
      };

      ModalView.prototype.saveModel = function(e) {
        var last, options, q;
        e.preventDefault();
        options = this.config();
        this.model.set(options, {
          silent: true
        });
        if (this["new"]) {
          last = this.collection.last();
          if (last && _.isEqual(this.model.toJSON(), last.toJSON())) {
            q = parseInt(last.get('quantity')) + 1;
            Vent.trigger('app:item:save', last, {
              quantity: q
            });
          } else {
            this.model.set({
              quantity: 1
            }, {
              silent: true
            });
            Vent.trigger('app:item:add', this.model);
          }
        } else {
          this.model.set(this.model.previousAttributes(), {
            silent: true
          });
          Vent.trigger('app:item:save', this.model, options);
        }
        $('.preset-options ul').removeAttr('class');
        $('.preset-options ul button').removeClass('selected');
        return Vent.trigger('app:modal:close');
      };

      ModalView.prototype.deleteModel = function(e) {
        e.preventDefault();
        if (!this["new"]) {
          Vent.trigger('app:item:remove', this.model);
        }
        if (this.elem) {
          this.elem.remove();
        }
        return Vent.trigger('app:modal:close');
      };

      ModalView.prototype.toggleAdvanced = function(e) {
        e.preventDefault();
        this.$('.advanced .wrap').slideToggle();
        return this.$('.advanced').toggleClass('open');
      };

      return ModalView;

    })(Backbone.View);

    AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.events = {
        'click .restart': 'resetCollection',
        'click .preset-options .option': 'setPreset',
        'change #managed-service': 'setManaged',
        'slide .bandwidth .slider': 'updateBandwidth',
        'click .calc_tooltip a.close-btn': 'closeTooltip'
      };

      AppView.prototype.initialize = function() {
        var addOnView, cartView, databaseView, loadBalancerView, serverView;
        cartView = new CartView({
          el: '#cart_list',
          collection: this.collection
        });
        loadBalancerView = new ColumnView({
          el: '#load_balancer',
          parent: this.collection
        });
        serverView = new ColumnView({
          el: '#server',
          parent: this.collection
        });
        databaseView = new ColumnView({
          el: '#database',
          parent: this.collection
        });
        addOnView = new ColumnView({
          el: '#add_on',
          parent: this.collection
        });
        Vent.on('app:modal:open', this.openModal, this);
        this.collection.on('all', this.updateGrandTotal, this);
        this.managedView = this.$('#managed-service');
        this.bandwidthView = this.$('.bandwidth .slider');
        return this.render();
      };

      AppView.prototype.render = function() {
        return this.bandwidthView.slider({
          max: 1000
        });
      };

      AppView.prototype.updateGrandTotal = function() {
        var amount, totalView;
        totalView = this.$('.total .amount');
        amount = this.collection.getGrandTotal();
        totalView.text(toCurrency(amount, ''));
        if (totalView.text().length > 7) {
          return totalView.css('font-size', '22px');
        } else {
          return totalView.attr('style', '');
        }
      };

      AppView.prototype.openModal = function(mod, col, el) {
        var isNew;
        isNew = mod.collection ? false : true;
        return new ModalView({
          model: mod,
          collection: col,
          elem: el,
          isNew: isNew
        });
      };

      AppView.prototype.setPreset = function(e) {
        var preset;
        if (this.confirmReset()) {
          preset = $(e.target).parent().attr('data-preset');
          this.resetCollection();
          $(e.target).parent().parent().addClass(preset);
          $(e.target).addClass('selected');
          return this.collection.add(Presets[preset]());
        }
      };

      AppView.prototype.setManaged = function() {
        var managed_item;
        managed_item = this.collection.find(function(item) {
          return item.get('kind') === 'managed_service';
        });
        if (this.managedView.attr('checked') && !managed_item) {
          return Vent.trigger('app:item:add', {
            kind: 'managed_service'
          });
        } else {
          return Vent.trigger('app:item:remove', managed_item);
        }
      };

      AppView.prototype.updateBandwidth = function(e, ui) {
        var bandwidth, bandwidth_item;
        bandwidth_item = this.collection.find(function(item) {
          return item.get('kind') === 'bandwidth';
        });
        bandwidth = ui.value;
        if (!bandwidth_item) {
          Vent.trigger('app:item:add', {
            kind: 'bandwidth',
            quantity: bandwidth
          });
        } else {
          Vent.trigger('app:item:save', bandwidth_item, {
            quantity: bandwidth
          });
        }
        return $('.bandwidth .slider-wrap label').text(bandwidth_item.get('quantity') + ' GB');
      };

      AppView.prototype.resetCollection = function() {
        this.collection.reset();
        $('.preset-options ul').removeAttr('class');
        return $('.preset-options ul button').removeClass('selected');
      };

      AppView.prototype.confirmReset = function(msg) {
        if (msg == null) {
          msg = 'This will clear your current configuration.';
        }
        if (!this.collection.isEmpty()) {
          return window.confirm(msg);
        } else {
          return true;
        }
      };

      AppView.prototype.closeTooltip = function(e) {
        var tooltip;
        tooltip = $(e.target).parent().parent();
        return tooltip.fadeOut(function() {
          return tooltip.remove();
        });
      };

      return AppView;

    })(Backbone.View);

    displaySize = function(size) {
      var measure;
      size = parseInt(size);
      measure = ' MB';
      if (size > 512) {
        measure = ' GB';
        size = Math.floor(size * 0.001);
      }
      return size + measure;
    };

    checkEmpty = function(empty) {
      if (empty) {
        return $('.item-list, .cart-list').addClass('empty');
      } else {
        $('.item-list, .cart-list').removeClass('empty');
        return $('.preset-wrap .calc_tooltip').remove();
      }
    };

    toCurrency = function(num, cur) {
      if (cur == null) {
        cur = '$';
      }
      return cur + parseFloat(num).toFixed(2);
    };

    titlize = function(title) {
      return title.replace('_', ' ').replace(/\w\S*/g, function(word) {
        return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
      });
    };

    betterFocus = function() {
      var len, that;
      that = $(this);
      that.focus();
      if (this.setSelectionRange) {
        len = that.val().length * 2;
        return this.setSelectionRange(len, len);
      } else {
        return that.val(that.val());
      }
    };

    return CalcApp;

  })();

  $(function() {
    var calcApp;
    return calcApp = new CalcApp();
  });

}).call(this);
