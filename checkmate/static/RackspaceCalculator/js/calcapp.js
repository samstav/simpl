// Generated by CoffeeScript 1.3.3
(function() {
  var AppView, Bandwidth, CartItemView, CartListView, Database, Dispatcher, Item, ItemCollection, ItemListView, ItemView, ItemsSubset, Kinds, LoadBalancer, Managed, ModalView, Presets, Server, Storage, betterFocus, decode, encode, titlize, toCurrency,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  toCurrency = function(num, cur) {
    if (cur == null) {
      cur = '$';
    }
    return cur + parseFloat(num).toFixed(2);
  };

  titlize = function(title) {
    return title.replace('_', ' ').replace(/\w\S*/g, function(word) {
      return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
    });
  };

  betterFocus = function() {
    var len, that;
    that = $(this);
    that.focus();
    if (this.setSelectionRange) {
      len = that.val().length * 2;
      return this.setSelectionRange(len, len);
    } else {
      return that.val(that.val());
    }
  };

  decode = function(save) {
    var b64;
    if (window.atob) {
      b64 = save.slice(6);
      return window.atob(b64);
    }
  };

  encode = function(json) {
    if (window.btoa) {
      return '?cart=' + window.btoa(JSON.stringify(json));
    }
  };

  (function($) {
    return $.fn.toolTip = function(tip) {
      return this.each(function() {
        var $tooltip, close, open,
          _this = this;
        $tooltip = $('<div class="calc_tooltip"><div><a class="close-btn" href="#">&times;</a><p /></div></div>');
        tip = tip || $(this).attr('data-tip');
        $tooltip.find('p').text(tip);
        close = function(e) {
          e.preventDefault();
          $(_this).unbind('mouseleave');
          $tooltip.find('.close').unbind('click');
          return $tooltip.fadeOut(function() {
            return $(this).remove();
          });
        };
        open = function() {
          $(_this).after($tooltip);
          $(_this).bind('mouseleave', close);
          return $tooltip.find('.close-btn').bind('click', close);
        };
        return open();
      });
    };
  })(jQuery);

  Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = function() {
      return {
        quantity: 1
      };
    };

    Item.prototype.title = function() {
      var title;
      title = titlize(this.get('kind'));
      if (this.get('kind') === 'bandwidth' || this.get('kind') === 'storage') {
        return title + ' (GB)';
      } else {
        return title;
      }
    };

    Item.prototype.size = function() {
      return '';
    };

    Item.prototype.clear = function() {
      return this.destroy();
    };

    return Item;

  })(Backbone.Model);

  LoadBalancer = (function(_super) {

    __extends(LoadBalancer, _super);

    function LoadBalancer() {
      return LoadBalancer.__super__.constructor.apply(this, arguments);
    }

    LoadBalancer.prototype.rate = function() {
      if (this.get('ssl')) {
        return 0.05;
      } else {
        return 0.015;
      }
    };

    LoadBalancer.prototype.price = function() {
      return this.get('quantity') * (this.rate() * this.get('hours')) + (this.get('connections') * (0.00015 * this.get('hours')));
    };

    return LoadBalancer;

  })(Item);

  Server = (function(_super) {

    __extends(Server, _super);

    function Server() {
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.prototype.rate = function() {
      return Kinds.rates[this.get('os')][this.get('ram_size')][0];
    };

    Server.prototype.price = function() {
      return this.get('quantity') * (this.rate() * this.get('hours')) + (this.get('redhat') ? 20 : 0);
    };

    Server.prototype.size = function() {
      return this.get('ram_size');
    };

    Server.prototype.disk_size = function() {
      return Kinds.rates[this.get('os')][this.get('ram_size')][1];
    };

    return Server;

  })(Item);

  Database = (function(_super) {

    __extends(Database, _super);

    function Database() {
      return Database.__super__.constructor.apply(this, arguments);
    }

    Database.prototype.rate = function() {
      var os, ram_size;
      os = this.get('os');
      ram_size = this.get('ram_size');
      if (this.get('daas')) {
        os = 'cloud_db';
        ram_size = ram_size > 4096 ? 4096 : ram_size < 512 ? 512 : this.get('ram_size');
      }
      return Kinds.rates[os][ram_size][0];
    };

    Database.prototype.price = function() {
      return this.get('quantity') * (this.rate() * this.get('hours')) + (this.get('daas') ? this.disk_size() * 0.75 : 0);
    };

    Database.prototype.size = function() {
      return this.get('ram_size');
    };

    Database.prototype.disk_size = function() {
      if (this.get('daas')) {
        return this.get('disk_size');
      } else {
        return Kinds.rates[this.get('os')][this.get('ram_size')][1];
      }
    };

    return Database;

  })(Item);

  Storage = (function(_super) {

    __extends(Storage, _super);

    function Storage() {
      return Storage.__super__.constructor.apply(this, arguments);
    }

    Storage.prototype.rate = 0.10;

    Storage.prototype.price = function() {
      return this.rate * this.get('disk_size');
    };

    return Storage;

  })(Item);

  Bandwidth = (function(_super) {

    __extends(Bandwidth, _super);

    function Bandwidth() {
      return Bandwidth.__super__.constructor.apply(this, arguments);
    }

    Bandwidth.prototype.rate = 0.18;

    Bandwidth.prototype.price = function() {
      return this.rate * this.get('quantity');
    };

    return Bandwidth;

  })(Item);

  Managed = (function(_super) {

    __extends(Managed, _super);

    function Managed() {
      return Managed.__super__.constructor.apply(this, arguments);
    }

    Managed.prototype.price = function() {
      return 100;
    };

    return Managed;

  })(Item);

  ItemCollection = (function(_super) {

    __extends(ItemCollection, _super);

    function ItemCollection() {
      return ItemCollection.__super__.constructor.apply(this, arguments);
    }

    ItemCollection.prototype.model = function(attrs, options) {
      switch (attrs.kind) {
        case "load_balancer":
          return new LoadBalancer(attrs, options);
        case "server":
          return new Server(attrs, options);
        case "database":
          return new Database(attrs, options);
        case "storage":
          return new Storage(attrs, options);
        case "bandwidth":
          return new Bandwidth(attrs, options);
        case "managed_service":
          return new Managed(attrs, options);
        default:
          return new Item(attrs, options);
      }
    };

    ItemCollection.prototype.localStorage = new Store('rack-calc-dev');

    ItemCollection.prototype.getGrandTotal = function() {
      return this.reduce(function(memo, item) {
        return item.price() + memo;
      }, 0);
    };

    return ItemCollection;

  })(Backbone.Collection);

  ItemsSubset = (function(_super) {

    __extends(ItemsSubset, _super);

    function ItemsSubset() {
      return ItemsSubset.__super__.constructor.apply(this, arguments);
    }

    ItemsSubset.prototype.initialize = function(models, options) {
      this.kind = options.kind || 'server';
      return this.parent = options.parent;
    };

    ItemsSubset.prototype.parent = function() {
      return this.parent;
    };

    ItemsSubset.prototype.sieve = function(item) {
      return item.get('kind') === this.kind;
    };

    return ItemsSubset;

  })(Backbone.Subset);

  ItemView = (function(_super) {

    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.tagName = 'li';

    ItemView.prototype.className = 'item';

    ItemView.prototype.template = _.template($('#item').html());

    ItemView.prototype.events = {
      'click': 'edit'
    };

    ItemView.prototype.initialize = function(bool) {
      this.model.on('change', this.render, this).on('destroy', this.remove, this);
      if (!!bool) {
        return Dispatcher.on('openModal', this.edit, this);
      }
    };

    ItemView.prototype.render = function() {
      $('.clone').remove();
      this.$el.html(this.template(this.model.toJSON()));
      if (this.model.get('quantity') < 2) {
        this.$('label.quantity').hide();
      } else {
        this.$('label.quantity').show();
      }
      return this;
    };

    ItemView.prototype.update = function() {
      var kind, measure, size;
      kind = this.model.get('kind');
      size = this.model.size();
      measure = ' MB';
      if (size > 512) {
        measure = ' GB';
        size = Math.floor(size * 0.001);
      }
      if (kind === 'bandwidth' || kind === 'storage' || kind === 'managed_service') {
        measure = '';
      }
      return this.model.set({
        price: this.model.price(),
        display_size: size + measure,
        display_price: toCurrency(this.model.price()),
        display_kind: this.model.title()
      }, {
        silent: true
      });
    };

    ItemView.prototype.edit = function() {
      var modal;
      return modal = new ModalView({
        model: this.model,
        offset: this.$el.offset()
      });
    };

    ItemView.prototype.clear = function() {
      this.model.clear();
      return this.remove();
    };

    return ItemView;

  })(Backbone.View);

  CartItemView = (function(_super) {

    __extends(CartItemView, _super);

    function CartItemView() {
      return CartItemView.__super__.constructor.apply(this, arguments);
    }

    CartItemView.prototype.events = {
      'keyup .quantity': 'updateOnKeyup'
    };

    CartItemView.prototype.initialize = function() {
      return CartItemView.__super__.initialize.call(this, false);
    };

    CartItemView.prototype.render = function() {
      this.update();
      this.$el.html(this.template(this.model.toJSON()));
      this.input = this.$('input.quantity');
      return this;
    };

    CartItemView.prototype.updateOnKeyup = function(e) {
      var val;
      val = this.input.val();
      if ((!val || val === '0') && e.keyCode === 13) {
        return this.clear();
      } else {
        this.model.set({
          quantity: val
        });
        return betterFocus.call(this.input);
      }
    };

    return CartItemView;

  })(ItemView);

  ItemListView = (function(_super) {

    __extends(ItemListView, _super);

    function ItemListView() {
      return ItemListView.__super__.constructor.apply(this, arguments);
    }

    ItemListView.prototype.events = {
      'click button.add': 'incrementLastOne'
    };

    ItemListView.prototype.initialize = function() {
      this.kind = this.$el.attr('id');
      if (!this.collection) {
        this.collection = new ItemsSubset([], {
          kind: this.kind,
          parent: this.options.parent
        });
      }
      this.collection.on('add', this.addOne, this).on('reset', this.addAll, this).on('all', this.render, this);
      return this.collection.liveupdate_keys = 'all';
    };

    ItemListView.prototype.render = function() {
      var length;
      length = this.collection.length;
      if (length > 5) {
        this.$el.addClass('split');
      } else {
        this.$el.removeClass('split');
      }
      return this;
    };

    ItemListView.prototype.addAll = function() {
      return this.collection.forEach(function(item) {
        return this.addOne(item);
      }, this);
    };

    ItemListView.prototype.addOne = function(item) {
      var view;
      view = new ItemView({
        model: item
      });
      this.$('.itemized').prepend(view.render().$el.css('z-index', this.nextOrder(item)));
      return this.center(this.$('.itemized'));
    };

    ItemListView.prototype.incrementLastOne = function() {
      var last, oldQuantity;
      if (this.collection.last()) {
        last = this.collection.last();
        oldQuantity = last.get('quantity');
        last.set('quantity', oldQuantity + 1);
      } else {
        this.createNew();
      }
      return Dispatcher.trigger('openModal');
    };

    ItemListView.prototype.createNew = function() {
      var last, length;
      length = this.collection.length;
      if (this.kind === 'storage' && length >= 1) {
        return false;
      }
      if (length >= 10) {
        return false;
      }
      if (this.collection.last()) {
        last = this.collection.last();
        return this.collection.add(last.clone());
      } else {
        return this.collection.add(Kinds[this.kind]);
      }
    };

    ItemListView.prototype.center = function(elem) {
      var top;
      top = (elem.height() / 2) + 35;
      return elem.css('margin-top', top * -1);
    };

    ItemListView.prototype.nextOrder = function() {
      return this.collection.length + 1;
    };

    ItemListView.prototype.getQuantityTotal = function() {
      return this.collection.reduce(function(memo, item) {
        return item.get('quantity') + memo;
      }, 0);
    };

    return ItemListView;

  })(Backbone.View);

  CartListView = (function(_super) {

    __extends(CartListView, _super);

    function CartListView() {
      return CartListView.__super__.constructor.apply(this, arguments);
    }

    CartListView.prototype.render = function() {
      if (this.collection.length <= 0) {
        return $('.item-list, .cart-list').addClass('empty');
      } else {
        $('.item-list, .cart-list').removeClass('empty');
        return $('.preset-wrap .calc_tooltip').remove();
      }
    };

    CartListView.prototype.addOne = function(item) {
      var view;
      view = new CartItemView({
        model: item
      });
      return this.$('.itemized').append(view.render().el);
    };

    return CartListView;

  })(ItemListView);

  ModalView = (function(_super) {

    __extends(ModalView, _super);

    function ModalView() {
      return ModalView.__super__.constructor.apply(this, arguments);
    }

    ModalView.prototype.tagName = 'form';

    ModalView.prototype.id = 'edit_modal';

    ModalView.prototype.events = {
      'click .save': 'update',
      'click .delete': 'delete',
      'click .close-btn': '_close',
      'click a.toggle-advanced': 'toggleAdvanced'
    };

    ModalView.prototype.template = _.template($('#modal').html());

    ModalView.prototype.initialize = function() {
      this.offset = this.options.offset;
      $('form#edit_modal').remove();
      this.ramz = _.keys(Kinds.rates.linux);
      return this.render();
    };

    ModalView.prototype.render = function() {
      var disk_value, ram_value,
        _this = this;
      this.$el.html(this.template(this.model.toJSON()));
      ram_value = _.indexOf(this.ramz, this.model.get('ram_size'));
      disk_value = this.model.get('disk_size') || 0;
      this.$('#ram_size.slide').slider({
        step: 1,
        min: 0,
        max: 7,
        value: ram_value
      });
      this.$('#disk_size.slide').slider({
        min: 0,
        max: 1000,
        value: disk_value
      });
      this.$el.css({
        'top': this.offset.top - 55,
        'left': this.model.get('kind') === 'load_balancer' ? this.offset.left + 180 : this.offset.left - 200
      });
      if (this.model.get('kind') === 'load_balancer') {
        this.$el.addClass('on-right');
      }
      this.$('#ram_size.slide').bind('slide', function(e, ui) {
        var measure, size;
        size = _this.ramz[ui.value];
        measure = ' MB';
        if (size > 512) {
          measure = ' GB';
          size = Math.floor(size * 0.001);
        }
        return _this.$('#ram_size.slide').siblings('i').text(size + measure);
      });
      this.$('#disk_size.slide').bind('slide', function(e, ui) {
        return _this.$('#disk_size.slide').siblings('i').text(ui.value + ' GB');
      });
      this.$('#daas').bind('change', function() {
        _this.$('#disk_size').parent().toggle();
        return _this.$('#db_type').parent().toggle();
      });
      $('body').append(this.$el);
      return this;
    };

    ModalView.prototype.update = function(e) {
      var index, options;
      e.preventDefault();
      options = {};
      if (this.$('#hours')) {
        options.hours = this.$('#hours').val();
      }
      if (this.$('#connections')) {
        options.connections = this.$('#connections').val();
      }
      if (this.$('#ram_size')) {
        index = this.$('#ram_size').slider('value');
        options.ram_size = this.ramz[index];
      }
      if (this.$('#disk_size')) {
        options.disk_size = this.$('#disk_size').slider('value');
      }
      if (this.$('#ssl')) {
        options.ssl = this.$('#ssl').attr('checked');
      }
      if (this.$('#redhat')) {
        options.redhat = this.$('#redhat').attr('checked');
      }
      if (this.$('#daas')) {
        options.daas = this.$('#daas').attr('checked');
      }
      if (this.$('#os')) {
        options.os = this.$('#os').val();
      }
      if (this.$('#db_type')) {
        options.db_type = this.$('#db_type').val();
      }
      this.model.set(options);
      return this._close(e);
    };

    ModalView.prototype.toggleAdvanced = function(e) {
      e.preventDefault();
      this.$('.advanced .wrap').slideToggle();
      return this.$('.advanced').toggleClass('open');
    };

    ModalView.prototype["delete"] = function(e) {
      e.preventDefault();
      this.model.clear();
      return this._close(e);
    };

    ModalView.prototype._close = function(e) {
      e.preventDefault();
      return this.$el.remove();
    };

    return ModalView;

  })(Backbone.View);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.events = {
      'click .restart': 'resetConfig',
      'click .preset-options .option': 'setPreset',
      'slide .bandwidth .slider': 'updateBandwidth',
      'change #managed-service': 'setManaged'
    };

    AppView.prototype.initialize = function() {
      var CartView, DatabaseView, LoadView, ServerView, StorageView;
      CartView = new CartListView({
        el: '#cart_list',
        collection: this.collection
      });
      LoadView = new ItemListView({
        el: '#load_balancer',
        parent: this.collection
      });
      ServerView = new ItemListView({
        el: '#server',
        parent: this.collection
      });
      DatabaseView = new ItemListView({
        el: '#database',
        parent: this.collection
      });
      StorageView = new ItemListView({
        el: '#storage',
        parent: this.collection
      });
      this.collection.on('all', this.render, this);
      $('.preset-wrap [data-preset=three] button').toolTip();
      return this.render();
    };

    AppView.prototype.render = function() {
      var amount, totalView;
      totalView = this.$('.total .amount');
      amount = this.collection.getGrandTotal();
      totalView.text(toCurrency(amount, ''));
      if (totalView.text().length > 7) {
        totalView.css('font-size', '22px');
      } else {
        totalView.attr('style', '');
      }
      this.managed_item = this.collection.find(function(item) {
        return item.get('kind') === 'managed_service';
      });
      this.bandwidth_item = this.collection.find(function(item) {
        return item.get('kind') === 'bandwidth';
      });
      this.managed = this.$('#managed-service');
      this.managed.attr('checked', this.managed_item ? true : false);
      this.$('.bandwidth .slider').slider({
        max: 1000
      });
      return this;
    };

    AppView.prototype.updateBandwidth = function(e, ui) {
      var bandwidth;
      bandwidth = ui.value;
      if (!this.bandwidth_item) {
        this.collection.add({
          kind: 'bandwidth',
          quantity: bandwidth
        });
      } else {
        this.bandwidth_item.set({
          quantity: bandwidth
        });
      }
      return $('.bandwidth .slider-wrap label').text(this.bandwidth_item.get('quantity') + ' GB');
    };

    AppView.prototype.setManaged = function() {
      if (this.managed.attr('checked') && !this.managed_item) {
        return this.collection.add({
          kind: 'managed_service'
        });
      } else {
        return this.managed_item.destroy();
      }
    };

    AppView.prototype.setPreset = function(e) {
      var preset;
      preset = $(e.target).parent().attr('data-preset');
      this.resetConfig();
      $(e.target).parent().parent().addClass(preset);
      $(e.target).addClass('selected');
      return this.collection.add(Presets[preset]());
    };

    AppView.prototype.resetConfig = function() {
      this.collection.reset();
      $('.preset-options ul').removeAttr('class');
      $('.preset-options ul button').removeClass('selected');
      $('.itemized li, form#edit_modal').remove();
      if (window.history) {
        return window.history.pushState(null, null, '/');
      }
    };

    return AppView;

  })(Backbone.View);

  Dispatcher = _.extend({}, Backbone.Events);

  $(function() {
    var Calc, Items, save;
    Items = new ItemCollection;
    Calc = new AppView({
      el: '#racker-calculator',
      collection: Items
    });
    save = window.location.search;
    if (save) {
      save = JSON.parse(decode(save));
      save.forEach(function(item) {
        return Items.add(item);
      });
    }
    return $('.calculator-actions .save').click(function() {
      if (window.history) {
        return window.history.pushState(null, null, encode(Items.toJSON()));
      }
    });
  });

  Presets = {
    one: function() {
      return [
        _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        })
      ];
    },
    two: function() {
      return [
        _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), Kinds.load_balancer
      ];
    },
    three: function() {
      return [
        _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.database, {
          quantity: 1,
          ram_size: 1024
        }), Kinds.load_balancer
      ];
    },
    four: function() {
      return [
        _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.database, {
          quantity: 1,
          ram_size: 1024
        }), Kinds.load_balancer
      ];
    },
    five: function() {
      return [
        _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.server, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.database, {
          quantity: 1,
          ram_size: 1024
        }), _.extend(Kinds.database, {
          quantity: 1,
          ram_size: 1024
        }), Kinds.load_balancer
      ];
    }
  };

  Kinds = {
    server: {
      kind: 'server',
      ram_size: 256,
      hours: 730,
      redhat: false,
      os: 'linux'
    },
    load_balancer: {
      kind: 'load_balancer',
      connections: 100,
      hours: 730,
      ssl: false
    },
    database: {
      kind: 'database',
      os: 'linux',
      db_type: 'other',
      ram_size: 256,
      hours: 730,
      daas: false
    },
    storage: {
      kind: 'storage',
      storage_type: 'cloud_files',
      disk_size: 100
    },
    rates: {
      linux: {
        '256': [0.015, 10],
        '512': [0.022, 20],
        '1024': [0.06, 40],
        '2048': [0.12, 80],
        '4096': [0.24, 160],
        '8192': [0.48, 320],
        '15872': [0.90, 620],
        '30720': [1.20, 1200]
      },
      windows: {
        '1024': [0.08, 40],
        '2048': [0.16, 80],
        '4096': [0.32, 160],
        '8192': [0.58, 320],
        '15872': [1.08, 620],
        '30720': [1.56, 1200]
      },
      cloud_db: {
        '512': [0.06],
        '1024': [0.115],
        '2048': [0.21],
        '4096': [0.40]
      }
    }
  };

}).call(this);
